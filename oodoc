#!/usr/bin/perl -w
#++
# % oodoc(1)	Infinity utilities
#
# # NAME
#
# oodoc - Extract embeded documentation from source
#
#--
#<<
# % index#sl
# - oodoc - Extracts embedded documentation from source 
#>>
#
#   Copyright (C) 2018 Alejandro Liu Ly
#
#   This is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as
#   published by the Free Software Foundation; either version 2 of 
#   the License, or (at your option) any later version.
#
#   This software is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public
#   License along with this program.  If not, see 
#   <http://www.gnu.org/licenses/>
#
use strict;
use warnings;

use File::Basename;
use File::Temp qw(tempfile tempdir);
use YAML;

BEGIN {
  my $c = 0;
  foreach my $f (qw(INCLUDE EXCLUDE INCLUDE_CODE)) {
    eval "sub ${f}() { $c; }";
    ++$c;
  }
}

my $verbose = 1;
my @sect_titles = ('','User commands','System calls','Library functions',
		   'Special files','File formats','Games','Miscellaneous',
		   'System administration','Linux kernel');

sub extract_docstrings($;$$$) {
  my ($fh,$start,$end,$invert) = @_;

  my @res = ();		# Returned content
  my $prefix_re;	# Searching prefix
  my $mode;		# Current search mode
  
  if ($start) {
    $start = quotemeta($start);
    $end = quotemeta($end);
    $mode = EXCLUDE;
  } else {
    $prefix_re = '\s*'.quotemeta($end);
    $end = '';
    $mode = INCLUDE;
  }

  while (<$fh>) {
    s/\r?\n$//; # Remove EOL
    if ($mode == EXCLUDE) {
      # Searching for beginning of embedded document
      if (/^(.*)$start$/) {
	# OK, found the beginning string...
	$prefix_re = $1;
	if ($prefix_re =~ /^\s*$/) {
	  # Only white space...
	  my $l = length($prefix_re);
	  my $ch = substr($_,$l,1);
	  my $tx = $ch;
	  while (substr($_,++$l,1) eq $ch) {
	    $tx .= $ch;
	  }
	  $prefix_re = '\s*'.$tx;
	} else {
	  # OK, there is non-white space before the special sequence
	  # so we convert the text before the special sequence as the
	  # comment marker...
	  $prefix_re =~ s/^\s+//;
	  $prefix_re =~ s/\s+$//;
	  $prefix_re = '\s*'.quotemeta($prefix_re);
	}
	push @res,'' if ($invert);
	$mode = INCLUDE;
	next;
      }
      push @res,$_ if ($invert);
    } elsif ($mode == INCLUDE || $mode == INCLUDE_CODE) {
      if ($end && /^\s*$end$/) {
	push @res,'' if ($invert);
	$mode = EXCLUDE;
	next;
      }
      my $ln = $_;
      if (s/^$prefix_re//) {
	if ((s/^\s*$//) || (s/^ //) || (/^\t/)) {
	  push @res, ($invert ? '' : $_);
	  if (/^\s*```/) {
	    $mode = ($mode == INCLUDE_CODE) ? INCLUDE : INCLUDE_CODE;
	  }
	  next;
	}
      }
      push @res, $ln if ($invert || $mode == INCLUDE_CODE);
    }
  }
  return @res;
}

sub get_meta_data(\@) {
  my ($res) = @_;

  my $i;
  for ($i = 0; $i < scalar(@$res) ; ++$i) {
    last unless ($res->[$i] =~ /^\s*$/);
  }
  if ($i < scalar(@$res)) {
    if ($res->[$i] =~ /^\s*%/) {
      # Found a title block
      my $start = $i;
      while (++$i < scalar(@$res) && $i - $start < 3) {
	last unless ($res->[$i] =~ /^\s*%/);
      }
      return parse_title_block($res,$start,$i);
    }
    my $prev = '';
    my %yaml = ();
    
    for (;$i < scalar(@$res) ; ++$i ) {
      if ($res->[$i] =~ /^\s*---\s*$/ && $prev =~ /^\s*$/) {
	# Potential start of YAML block...
	my $start = $i;
	while (++$i < scalar(@$res)) {
	  if ($res->[$i] =~ /^\s*---\s*$/ || $res->[$i] =~ /^\s*...\s*$/) {
	    # Found the ending of YAML block
	    my $yin = parse_yaml_block($res,$start,$i);
	    last unless ($yin);

	    my %loop = (':offset' => $start, ':length' => $i-$start+1);
	    while (my ($k,$v) = each %loop) {
	      if (exists $yaml{$k}) {
		if (ref($yaml{$k})) {
		  push @{$yaml{$k}}, $v;
		} else {
		  $yaml{$k} = [ $yaml{$k}, $v];
		}
	      } else {
		$yaml{$k} = $v;
	      }
	    }
	    %yaml = ( %yaml, %$yin);
	    last;
	  }
	}
      }
      $prev = $res->[$i];
    }
    return \%yaml if (scalar(%yaml));
    return undef;
  }
  
  # 
  # Nothing Found!
  #
  return undef;
}

sub parse_title_block(\@$$) {
  my ($res,$start,$end) = @_;
  my %attrs = ();
  $attrs{':offset'} = $start;
  $attrs{':length'} = $end - $start;
  my $title = $res->[$start];
  $title =~ s/^\s*%\s*//;
  my ($a,$b) = split(/\s+/,$title,2);
  if ($a =~ /\((\d+)\)$/) {
    # This is a man page...
    $attrs{'title'} = $a;
    $attrs{'sn'} = $1;
    my $snum = int($1);
    if ($b) {
      my ($a,$c) = split(/\s*\|\s*/,$b,2);
      $attrs{'section'} = $a ? $a : $sect_titles[$snum];
      if ($c) {
	$attrs{'version'} = $c;
	$attrs{'version'} =~ s/^\s*Version\s*//;
      }
    }
  } else {
    $attrs{'title'} = $title;
  }
  $attrs{'author'} = $start+1 < $end ? $res->[$start+1] : '';
  $attrs{'date'} = $start+2 < $end ? $res->[$start+2] : '';
  foreach my $k (keys %attrs) {
    $attrs{$k} =~ s/^\s*%\s*//;
  }
  return \%attrs;
}

sub parse_yaml_block(\@$$) {
  my ($res,$start,$end) = @_;
  #print '$res:   ',scalar(@$res),"\n";
  #print '$start: ',$start,"\n";
  #print '$end:   ',$end,"\n";
  #print join("\n",@$res[$start .. $end]),"\n";
  my ($l) = Load(join("\n",@$res[$start .. $end])."\n");
  return $l;
}

sub rm_meta_data(\@\%) {
  my ($res,$attrs) = @_;

  return '' unless ((exists $attrs->{':offset'}) && (exists $attrs->{':length'}));
  if (!ref($attrs->{':offset'})) {
    # The simple case...
    splice @$res,$attrs->{':offset'},$attrs->{':length'};
  } else {
    my $i = scalar(@{$attrs->{':offset'}});
    while ($i--) {
      splice @$res,$attrs->{':offset'}->[$i],$attrs->{':length'}->[$i];
    }
  }
  delete $attrs->{':offset'};
  delete $attrs->{':length'};
  return 1;
}

sub file_attributes($) {
  my ($f) = @_;
  my %attr = ();
  $attr{'FileName'} = $f;
  ($attr{'DocName'},$attr{'Dir'},$attr{'Ext'}) = fileparse($f,qr/\.[^.]*$/);

  my ($t);
  # Get author...
  # First we try to do it via git
  $t = `git log -1 --format='%aN' "$f" 2>/dev/null`;
  if ($t) {
    chomp($t);
    $attr{'Author'} = $t;
  } else {
    # Otherwise, try through filesystem...
    my ($uid) = (stat($f))[4];
    $attr{'Author'} = getpwuid($uid);
  }
  # Get last update date...
  # First we try to do it via git
  $t = `git log -1 --date=short --format='%ad' "$f" 2>/dev/null`;
  if ($t) {
    chomp($t);
    $attr{'Date'} = $t;
  } else {
    # Otherwise, try through filesystem...
    my ($mtime) = (stat($f))[9];
    my ($mday,$mon,$year) = (localtime($mtime))[3..6];
    $attr{'Date'} = sprintf('%04d-%02d-%02d',$year+1900,$mon+1,$mday);
  }
  
  # Get the revision info... 
  # First try to do it via tags...
  $t = `cd "$attr{Dir}" && git describe --dirty=-EXP 2>/dev/null`;
  if ($t) {
    chomp($t);
    $attr{'Revision'} = $t;
  } else {
    # Try it from log info
    $t = `git log -1 --format='%h' "$f" 2>/dev/null`;
    if ($t) {
      chomp($t);
      $attr{'Revision'} = $t;
    }
  }
  return \%attr;
}

sub add_man_meta_data(\%$) {
  my ($meta,$fn) = @_;
  my $fattr = file_attributes($fn);
  foreach my $k (keys %$fattr) {
    my $j = lc($k);
    next if ($meta->{$j});
    $meta->{$j} = $fattr->{$k};
  }
  $meta->{'title'} = uc($meta->{'docname'}).'(1)' unless ($meta->{'title'});
}

sub title_block(\%) {
  my ($meta) = @_;
  my $txt = '';
  
  $txt .= '% '.$meta->{'title'};
  if ((scalar(split(/\s+/,$meta->{'title'})) == 1) && ($meta->{'title'} =~ /\(\d+\)$/)) {
    # This is a man page title block
    $txt .= ' '.$meta->{'section'} if ($meta->{'section'});
    if ($meta->{'version'}) {
      $txt .= ' | Version '.$meta->{'version'};
    } elsif ($meta->{'revision'}) {
      $txt .= ' | Revision '.$meta->{'revision'};
    }
  }
  $txt .= "\n";
  foreach my $attr (qw(author date)) {
    $txt .= '% '.($meta->{$attr} ? $meta->{$attr} : '')."\n";
  }
  $txt .= "\n";
  return $txt;
}

sub yaml_block(\%;$) {
  my ($meta,$end) = @_;
  $end = '...' unless ($end);
  return Dump($meta).$end."\n\n";
}

sub extract_manpage($) {
  my ($f) = @_;
  
  open(my $fh,'<',$f) || die "$f: $!\n";
  my @out = extract_docstrings($fh,'#++','#--');
  close($fh);
  my $meta = get_meta_data(@out);
  if ($meta) {
    rm_meta_data(@out,%$meta);
  } else {
    $meta = {};
  }
  add_man_meta_data(%$meta,$f);
  return ($meta,\@out);
}

sub exdoc_dir(\%$) {
  my ($out,$d) = @_;
  my @subs = ( $d );
  
  while (scalar(@subs)) {
    $d = shift @subs;
    opendir(my $dh,$d) || die("$d: $!\n");
    while (my $n = readdir($dh)) {
      next if ($n eq '.' || $n eq '..' || substr($n,0,1) eq '.');
      # We should filter things here
      my $fp = $d.$n;
      next if (-l $fp);
      if (-d $fp) {
	next if (-f $fp.'/.git'); #Skip git sub-modules
	push @subs,$fp.'/';
      } elsif (-f $fp) {
	exdoc_file($out,$d.$n);
      }
    }
    closedir($dh);
  }
}

sub exdoc_file(\%$) {
  my ($out,$f) = @_;
  
  my ($name,$dir,$suffix) = fileparse($f,qr/\.[^.]*/);
  print STDERR "$f ($name - $suffix): " if ($verbose);
    
  open(my $fh,'<',$f) || die "$f: $!\n";
  my @out = ();
  if (lc($suffix) eq '.md') {
    while (<$fh>) {
      s/\s+$//;
      push @out,$_;
    }
  } else {
    @out = extract_docstrings($fh,'#<<','#>>');
  }
  close($fh);
  
  my ($outfile,$sect,$cnt) = ($name,'',0);
  foreach my $ln (@out) {
    if ($ln =~ /^\s*%\s*(\S*)(.*)$/) {
      if (substr($1,0,1) ne '<') { # Skip fragment references
	$outfile = $1 ? $1 : $name;
	my $lopts = $2;
	  
	my ($x,$y) = split(/#/,$outfile);
	if ($y) {
	  $outfile = $x;
	  $sect = $y;
	}
	if ($lopts) {
	  $out->{$outfile} = {} unless ($out->{$outfile});
	  $out->{$outfile}->{$sect} = [] unless ($out->{$outfile}->{$sect});
	  unshift @{$out->{$outfile}->{$sect}}, $lopts; ++$cnt;
	  print "LOPTS: $lopts\n";
	}
	next;
      }
    }
    if (!(exists $out->{$outfile} && exists $out->{$outfile}->{$sect})) {
      next if ($ln eq ''); # Skip empty lines at the top...
    }
    $out->{$outfile} = {} unless ($out->{$outfile});
    $out->{$outfile}->{$sect} = [] unless ($out->{$outfile}->{$sect});
    if (scalar(@{$out->{$outfile}->{$sect}}) == 0) {
      # Create a default metadata block...
      my $fattr = file_attributes($f);
      push @{$out->{$outfile}->{$sect}},'';
      push @{$out->{$outfile}->{$sect}},split(/\s*\n/,Dump($fattr));
      push @{$out->{$outfile}->{$sect}},'---';
      push @{$out->{$outfile}->{$sect}},'';
    }
    #print STDERR "$outfile,$sect: $out->{$outfile}->{$sect}\n";
    push @{$out->{$outfile}->{$sect}},$ln; ++$cnt;
  }
  print STDERR $cnt,"\n" if ($verbose);
}

sub cms_expand(\@\@\%);
sub cms_expand(\@\@\%) {
  my ($odat,$idat,$frags) = @_;
  foreach my $ln (@$idat) {
    if ($ln =~ s/^\s*%\s*<\s*(\S+)//) {
      my $f = $1;
      if ($frags->{$f}) {
	push @$odat,$ln if ($ln);
	cms_expand(@$odat,@{$frags->{$f}},%$frags);
      } else {
	push @$odat,"% <$f $ln";
      }
    } else {
      push @$odat,$ln;
    }
  }
}

sub cms_out($\%) {
  my ($outdir,$dat) = @_;
  
  if (! -d $outdir) {
    mkdir($outdir,0777) || die("mkdir($outdir): $!\n");
  }
  my $fragments = undef;
  if (exists $dat->{''}) {
    $fragments = $dat->{''};
    delete $dat->{''};
  }
  while (my ($f,$s) = each %$dat) {
    next unless ($f);
    my @odat = ();
    foreach my $sn (sort keys %$s) {
      if ($fragments) {
	cms_expand(@odat,@{$s->{$sn}},%$fragments);
      } else {
	push @odat, @{$s->{$sn}};
      }
    }
    #print join("\n",@odat),"\n\n=\n\n";
    my $meta = get_meta_data(@odat);
    rm_meta_data(@odat,%$meta);
    $meta->{'title'} = ucfirst($f) unless ($meta->{'Title'});
    print STDERR "Writing $f.." if ($verbose);
    open(my $fh,'>',$outdir.$f.'.md') || die("$f: $!\n");
    print $fh yaml_block(%$meta,'---'), join("\n",@odat),"\n";
    close($fh);
    print STDERR ".OK\n" if ($verbose);
  }
}

if (scalar(@ARGV) == 0) {
  #++
  #
  # # SYNOPSIS
  #
  # **oodoc** **subcmd** _[opts]_
  #
  print STDERR "Usage:\n\t$0 SUBCMD [opts]\n";
  exit(1);
  #
  # # DESCRIPTION
  #
  # **oodoc** read source and/or script files and converts specially
  # embedded comments into documentation files.
  #
  #--
}
  
my $op = shift(@ARGV);

#++
#
# ## SUBCOMMANDS
#
if ($op eq 'man') {
  #
  # - **man** _[options]_ **[input_file]**:
  #   Display `UNIX` style man page from the specified source file.
  #   Options:
  #   * --query=<value>: Just display the <value> from the file metadata.
  #   * --roff: Output NROFF format.
  #   * --text : Output Markdown.
  my $mode = 'view';
  while (scalar(@ARGV)) {
    if ($ARGV[0] =~ /^--query=(.*)$/) {
      $mode = 'query:'.$1;
    } elsif ($ARGV[0] eq '--roff') {
      $mode = 'roff';
    } elsif ($ARGV[0] eq '--text') {
      $mode = 'txt';
    } else {
      last;
    }
    shift;
  }
  foreach my $f (@ARGV) {
    my ($meta,$out) = extract_manpage($f);
    if (scalar(@$out) == 0) {
      warn "$f: no documentation found\n";
      next;
    }
    if ($mode =~ /^query:(.*)$/) {
      print $meta->{$1},"\n";
    } elsif ($mode eq 'roff') {
      open(my $of,'| pandoc -s -t man')|| die "$!\n";
      print $of title_block(%$meta);
      print $of join("\n",@$out),"\n";
      close($of);      
    } elsif ($mode eq 'txt') {
      print title_block(%$meta);
      print join("\n",@$out),"\n";
    } else {
      open(my $of,'| pandoc -s -t man | man -l -') || die "$!\n";
      print $of title_block(%$meta);
      print $of join("\n",@$out),"\n";
      close($of);
    }
    
  }
} elsif ($op eq 'genman') {
  #
  # - **genman** _[options]_ **[input_files]**:
  #   Generate `UNIX` style man page from the specified source file.
  #   Options:
  #   * --gzip: Gzip output (this is the default)
  #   * --no-gzip: Disable Gzip output
  #   * --showdir : Display section directory (this is the default)
  #   * --no-showdir : Do not display section directory
  #   * --subs : Create sub-directories for man sections
  #   * --outdir=path : create files in the specified directory
  my $gzip = 1;
  my $outdir = '';
  my $showdir = 1;
  my $subs = 0;
  
  my $mode = 'view';
  while (scalar(@ARGV)) {
    if ($ARGV[0] eq '--gzip') {
      $gzip = 1;
    } elsif ($ARGV[0] eq '--no-gzip') {
      $gzip = 0;
    } elsif ($ARGV[0] eq '--showdir') {
      $showdir = 1;
    } elsif ($ARGV[0] eq '--no-showdir') {
      $showdir = 0;
    } elsif ($ARGV[0] eq '--subs') {
      $subs = 1;
    } elsif ($ARGV[0] =~ /^--outdir=(.*)$/) {
      $outdir = $1;
      $outdir =~ s/\/*$//;
    } else {
      last;
    }
    shift;
  }
  foreach my $f (@ARGV) {
    my ($meta,$out) = extract_manpage($f);
    if (scalar(@$out) == 0) {
      warn "$f: no documentation found\n";
      next;
    }
    my $md = 'man'.$meta->{'sn'}.'/';
    my $fn = $meta->{'docname'}.'.'.$meta->{'sn'};
    
    if ($subs && ! -d $outdir.$md) {
      mkdir($outdir.$md,0777) || die "mkdir: $!\n";
    }
    print $md if ($showdir);
    print $fn;
    print '.gz' if ($gzip);
    print "\n";
    open(my $of,'| pandoc -s -t man '.($gzip ? ' | gzip ' : '').
		' > '.$outdir.($subs ? $md : '').$fn.
		($gzip ? '.gz' : '')) || die "$!\n";
    print $of title_block(%$meta);
    print $of join("\n",@$out),"\n";
    close($of);
  }
} elsif ($op eq 'exdoc') {
  #
  # - **gendoc** _[options]_ **[input_files]**:
  #   Extract `Markdown` documentation from the specified files
  #   Options:
  #   * --outdir=path : create files in the specified directory
  #   * --recursive|-r : recursively extract from directories
  #   * --no-recursive|-R : disable recursive extraction
  #   * --verbose|-v : verbose
  #   * --no-verbose|-q : quiet
  my $outdir = '';
  my %data = ();
  my $recursive = 1;
  
  while (scalar(@ARGV)) {
    if ($ARGV[0] =~ /^--outdir=(.*)$/) {
      $outdir = $1;
      $outdir =~ s!/*$!/!;
    } elsif ($ARGV[0] eq '--no-recursive' || $ARGV[0] eq '-R') {
      $recursive = 0;
    } elsif ($ARGV[0] eq '--recursive' || $ARGV[0] eq '-r') {
      $recursive = 1;
    } elsif ($ARGV[0] eq '--no-verbose' || $ARGV[0] eq '-q') {
      $verbose = 0;
    } elsif ($ARGV[0] eq '--verbose' || $ARGV[0] eq '-v') {
      $verbose = 1;      
    } else {
      last;
    }
    shift;
  }
  die("No --outdir specified\n") unless ($outdir);
  foreach my $f (@ARGV) {
    if (-l $f) {
      warn "$f: is a symlink, ignoring\n";
    } elsif (-d $f) {
      if ($recursive) {
	$f =~ s!/*$!/!;
	exdoc_dir(%data,$f);
      } else {
	warn "$f: is a directory, ignoring\n";
      }
    } elsif (-f $f) {
      exdoc_file(%data,$f);
    } else {
      warn "$f: Invalid file, skipping\n";
    }
  }
  cms_out($outdir,%data);
} elsif ($op eq 't') {
  foreach my $f (@ARGV) {
    my ($meta,$out) = extract_manpage($f);
    print yaml_block(%$meta);
  }
} else {
  die "Unknown subcmd: $op\n";
}
#--


#++
#
# # EMBEDDED DOCUMENTATION
#
# *oodoc* can generate documentation in 
# [Markdown](http://daringfireball.net/projects/markdown/syntax).
#
# It does so by extracting files comments.  If the file extension
# is `.md`, then it simply uses all the file contents.  All other
# file extensions are searched for patters:
#
# - `#<<`
# - `#` documentation
# - `#>>`
#
# By default, it would write to a file as the same name as the source
# with the extension replaced with `.md`.
#
# Whenever a documentation line `% (filename)[#section] [text]`, the
# output file will change to `filename`.  Optionally a `#section`
# can be specified.  This `#section` is only used for ordering the
# output.  (#sections are ordered alphabetically).
#
# If a `text` is specified, it will be prepended to the beginning of
# the file.
#
# ## Special syntax
#
# You can declare _fragments_ that can be used (and re-used) elsewhere
# in the documentation.
#
# To declare a fragment start with:
#
# `% #fragment`
#
# Then to include it, use:
#
# `% <fragment`
#
# # MAN PAGES
#
# *oodoc* can generate `UNIX` style manual pages from embedded
# comments.  Text in these comments can be formatted using *Markdown*.
#
# **oodoc** can be integrated with *make(1)* scripts or called
# directly to read documentation from files.
#
# Embedded documentation is extracted from blocks
# delimited by:
#
#     #++
#     # Documentation
#     #--
#
# ## LAYOUT
#
# The basic layout of a man page should look like this:
#
#     #++
#     # % cmd(1)
#     #
#     # # NAME
#     #
#     # cmd - one line description
#     #
#     # # SYNOPSIS
#     #
#     # *cmd* ['options'] 'args'
#     #
#     # # DESCRIPTION
#     #
#     # A textual description of the functioning of the command.
#     #
#     # # SEE ALSO
#     #
#     # List of related commands or functions (comma separated).
#     #--
#
# `NAME` and `SYNOPSIS` are mandatory.
#
# `NAME` should contain the name of the
# command or function, followed by a one-line description of what it does.
#
# `SYNOPSIS`, in the case of a command, a formal description of how to run
# it and what command line options it takes. For program
# functions, a list of the parameters the function takes and
# which header file contains its definition.
#
# Other sections may be present, but these are not well standardized
# across man pages. Common examples include:
#
# `OPTIONS`, `EXIT STATUS`, `ENVIRONMENT`, `BUGS`, `FILES`, `AUTHOR`, `REPORTING`,
# `EXAMPLES`, `BUGS`, `HISTORY` and `COPYRIGHT`.
#
# ## Title block
#
# The beginning of the man page contains a title block.  It is
# defined by [pandoc](https://pandoc.org/MANUAL.html#metadata-blocks)
# and it contains:
#
#     % cmdname(n) section title | version or revision
#     % author
#     % date
#
# If author or date are not needed they can be left blank.  Example:
#
#     % oodoc(1) infinity tools | Version 1.0
#     % A Liu Ly
#     % 2018-01-01
#
# ## Sections
#
# Common manual sections:
#
# * 1::	General commands
# * 2::	System calls
# * 3::	Library functions, covering in particular the C standard library
# * 4::	Special files (usually devices, those found in /dev) and drivers
# * 5::	File formats and conventions
# * 6::	Games and screensavers
# * 7::	Miscellanea
# * 8::	System administration commands and daemons
#
# # REFERENCES
#
# * Man page conventions: http://linux.die.net/man/7/man-pages
#
#--


#<<
# % todo#A
#
# # TODO
#
# % references
#
# # REFERENCES
#
# % references#pandoc
#
# * https://pandoc.org/MANUAL.html#metadata-blocks
# * http://jeromebelleman.gitlab.io/posts/publishing/manpages/
#
# % notes
#
# `oodoc` should be able to generate documentation/notes files
# and export them to a CMS.
#
# * CMS
#   - https://github.com/jumbojett/OpenID-Connect-PHP
#   - https://getgrav.org/downloads
#   - http://picocms.org/download/
#
# * Criteria
#   1. Size
#   2. Markdown
#   3. Flat File
#   4. Plugins & Themes
#   5. User access with KeyCloak
#
# % todo#MVP
#
# - MVP
#   - [x] viewer for man pages
#   - [x] extract to flat-file CMS
#
# - Modes
#   - strip : remove all docstrings...
#   - man : create man pages
#   - viewer
#   - generate man pages for pkgs
# - help : in-line help
#   - for scripts
#   - for compiled files
# - multi-file documetation for flat-file CMS
#   - pico (smaller footprint)
#     - ++generate of diagrams using asciiart to png/svg
#     - ++authentication against keycloak
#       - openid connect
#       - auth_mellon
#   - grav
# - doxygen?
#
#>>


 __END__

    if (scalar(%macros)) {
	my $regex = join '|', map quotemeta, keys %macros;
	$txt =~ s/($regex)/$macros{$1}/g;
	foreach my $k (keys %attrs) {
	    $attrs{$k} =~ s/($regex)/$macros{$1}/g;
	}
    }









